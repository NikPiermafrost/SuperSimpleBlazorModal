@using Microsoft.JSInterop
@inject IJSRuntime JS

<dialog id="@Id" class="@ExtraCssClass">
    @ChildContent
</dialog>

@code {
    [Parameter]
    [EditorRequired] 
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string Id { get; set; } = Guid.NewGuid().ToString();

    [Parameter]
    public string ExtraCssClass { get; set; } = "";

    [Parameter]
    public bool OpenOnFirstRender { get; set; } = false;

    [Parameter]
    public EventCallback<bool> OnModalStateChange { get; set; }

    private bool IsOpen = false;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (OpenOnFirstRender)
            {
                await ShowModal();
            }
        }
    }

    public async Task ShowModal() 
    {
        await JS.InvokeVoidAsync("eval", $"document.getElementById('{Id}').showModal()");
        IsOpen = true;
        if (OnModalStateChange.HasDelegate)
        {
            await OnModalStateChange.InvokeAsync(IsOpen);
        }
    }

    public async Task CloseModal() 
    {
        await JS.InvokeVoidAsync("eval", $"document.getElementById('{Id}').close()");
        IsOpen = true;
        if (OnModalStateChange.HasDelegate)
        {
            await OnModalStateChange.InvokeAsync(IsOpen);
        }
    }
}